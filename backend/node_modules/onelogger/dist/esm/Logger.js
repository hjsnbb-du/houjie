import { strict as assert } from 'node:assert';
import { format } from 'node:util';
// make sure we have a global logger instances map
if (!globalThis.__ONE_LOGGER_INSTANCES__) {
    globalThis.__ONE_LOGGER_INSTANCES__ = new Map();
}
export class Logger {
    #loggerName;
    #prefix;
    constructor(options) {
        this.#loggerName = options.loggerName;
        this.#prefix = options.prefix;
    }
    info(message, ...optionalParams) {
        this.#log('info', message, ...optionalParams);
    }
    warn(message, ...optionalParams) {
        this.#log('warn', message, ...optionalParams);
    }
    error(message, ...optionalParams) {
        this.#log('error', message, ...optionalParams);
    }
    #log(level, message, ...optionalParams) {
        const realLogger = this._getRealLogger();
        if (this.#prefix) {
            const log = format(message, ...optionalParams);
            realLogger[level](`[${this.#prefix}] ${log}`);
        }
        else {
            realLogger[level](message, ...optionalParams);
        }
    }
    _getRealLogger() {
        return globalThis.__ONE_LOGGER_INSTANCES__.get(this.#loggerName) ?? globalThis.console;
    }
    static setRealLogger(loggerName, realLogger) {
        if (!realLogger) {
            globalThis.__ONE_LOGGER_INSTANCES__.delete(loggerName);
        }
        else {
            assert(!(realLogger instanceof Logger), 'can\'t set realLogger to Logger instance');
            globalThis.__ONE_LOGGER_INSTANCES__.set(loggerName, realLogger);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL0xvZ2dlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxJQUFJLE1BQU0sRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMvQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBUW5DLGtEQUFrRDtBQUNsRCxJQUFJLENBQUMsVUFBVSxDQUFDLHdCQUF3QixFQUFFLENBQUM7SUFDekMsVUFBVSxDQUFDLHdCQUF3QixHQUFHLElBQUksR0FBRyxFQUFtQixDQUFDO0FBQ25FLENBQUM7QUFPRCxNQUFNLE9BQU8sTUFBTTtJQUNqQixXQUFXLENBQVM7SUFDcEIsT0FBTyxDQUFVO0lBRWpCLFlBQVksT0FBc0I7UUFDaEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDO1FBQ3RDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztJQUNoQyxDQUFDO0lBQ0QsSUFBSSxDQUFDLE9BQWEsRUFBRSxHQUFHLGNBQXFCO1FBQzFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLGNBQWMsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFDRCxJQUFJLENBQUMsT0FBYSxFQUFFLEdBQUcsY0FBcUI7UUFDMUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsY0FBYyxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUNELEtBQUssQ0FBQyxPQUFhLEVBQUUsR0FBRyxjQUFxQjtRQUMzQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsR0FBRyxjQUFjLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQsSUFBSSxDQUFDLEtBQWdDLEVBQUUsT0FBYSxFQUFFLEdBQUcsY0FBcUI7UUFDNUUsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3pDLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2pCLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxPQUFPLEVBQUUsR0FBRyxjQUFjLENBQUMsQ0FBQztZQUMvQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDaEQsQ0FBQzthQUFNLENBQUM7WUFDTixVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxFQUFFLEdBQUcsY0FBYyxDQUFDLENBQUM7UUFDaEQsQ0FBQztJQUNILENBQUM7SUFFUyxjQUFjO1FBQ3RCLE9BQU8sVUFBVSxDQUFDLHdCQUF3QixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksVUFBVSxDQUFDLE9BQU8sQ0FBQztJQUN6RixDQUFDO0lBRUQsTUFBTSxDQUFDLGFBQWEsQ0FBQyxVQUFrQixFQUFFLFVBQStCO1FBQ3RFLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUNoQixVQUFVLENBQUMsd0JBQXdCLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3pELENBQUM7YUFBTSxDQUFDO1lBQ04sTUFBTSxDQUFDLENBQUMsQ0FBQyxVQUFVLFlBQVksTUFBTSxDQUFDLEVBQUUsMENBQTBDLENBQUMsQ0FBQztZQUNwRixVQUFVLENBQUMsd0JBQXdCLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNsRSxDQUFDO0lBQ0gsQ0FBQztDQUNGIn0=