"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.YYYYMMDDHHmmssSSS = void 0;
exports.resetTimezone = resetTimezone;
exports.getDateStringParts = getDateStringParts;
exports.accessLogDate = accessLogDate;
exports.logDate = logDate;
exports.YYYYMMDDHHmmss = YYYYMMDDHHmmss;
exports.YYYYMMDD = YYYYMMDD;
exports.datestruct = datestruct;
exports.timestamp = timestamp;
exports.parseTimestamp = parseTimestamp;
// only set once.
let TIMEZONE = '';
function resetTimezone() {
    TIMEZONE = '';
    let _hourOffset = Math.floor(-(new Date().getTimezoneOffset()) / 60);
    if (_hourOffset >= 0) {
        TIMEZONE += '+';
    }
    else {
        TIMEZONE += '-';
    }
    _hourOffset = Math.abs(_hourOffset);
    const _hourOffsetStr = _hourOffset < 10 ? `0${_hourOffset}` : `${_hourOffset}`;
    TIMEZONE += `${_hourOffsetStr}00`;
    return TIMEZONE;
}
resetTimezone();
const MONTHS = {
    '01': 'Jan',
    '02': 'Feb',
    '03': 'Mar',
    '04': 'Apr',
    '05': 'May',
    '06': 'Jun',
    '07': 'Jul',
    '08': 'Aug',
    '09': 'Sep',
    // eslint-disable-next-line quote-props
    '10': 'Oct',
    // eslint-disable-next-line quote-props
    '11': 'Nov',
    // eslint-disable-next-line quote-props
    '12': 'Dec',
};
/**
 * return `[ YYYY, MM, DD, HH, mm, ss ]` date string array
 */
function getDateStringParts(d, onlyDate) {
    d = d || new Date();
    const monthNum = d.getMonth() + 1;
    const month = monthNum < 10 ? `0${monthNum}` : `${monthNum}`;
    const dateNum = d.getDate();
    const date = dateNum < 10 ? `0${dateNum}` : `${dateNum}`;
    if (onlyDate) {
        return [`${d.getFullYear()}`, month, date];
    }
    const hoursNum = d.getHours();
    const hours = hoursNum < 10 ? `0${hoursNum}` : `${hoursNum}`;
    const minutesNum = d.getMinutes();
    const minutes = minutesNum < 10 ? `0${minutesNum}` : `${minutesNum}`;
    const secondsNum = d.getSeconds();
    const seconds = secondsNum < 10 ? `0${secondsNum}` : `${secondsNum}`;
    return [`${d.getFullYear()}`, month, date, hours, minutes, seconds];
}
/**
 * Access log format date. format: `moment().format('DD/MMM/YYYY:HH:mm:ss ZZ')`
 */
function accessLogDate(d) {
    // 16/Apr/2013:16:40:09 +0800
    d = d || new Date();
    const [year, month, date, hours, minutes, seconds] = getDateStringParts(d);
    return `${date}/${MONTHS[month]}/${year}:${hours}:${minutes}:${seconds} ${TIMEZONE}`;
}
function logDate(d, msSep) {
    if (typeof d === 'string') {
        // logDate(msSep)
        msSep = d;
        d = new Date();
    }
    else {
        // logDate(d, msSep)
        d = d || new Date();
    }
    const [year, month, date, hours, minutes, seconds] = getDateStringParts(d);
    const millisecondsNum = d.getMilliseconds();
    let milliseconds = `${millisecondsNum}`;
    if (millisecondsNum < 10) {
        milliseconds = `00${millisecondsNum}`;
    }
    else if (millisecondsNum < 100) {
        milliseconds = `0${millisecondsNum}`;
    }
    msSep = msSep || '.';
    return `${year}-${month}-${date} ${hours}:${minutes}:${seconds}${msSep}${milliseconds}`;
}
exports.YYYYMMDDHHmmssSSS = logDate;
/**
 * `moment().format('YYYY-MM-DD HH:mm:ss')` format date string.
 */
function YYYYMMDDHHmmss(d, options) {
    d = d || new Date();
    if (!(d instanceof Date)) {
        d = new Date(d);
    }
    let dateSep = '-';
    let timeSep = ':';
    if (options?.dateSep) {
        dateSep = options.dateSep;
    }
    if (options?.timeSep) {
        timeSep = options.timeSep;
    }
    const [year, month, date, hours, minutes, seconds] = getDateStringParts(d);
    return `${year}${dateSep}${month}${dateSep}${date} ${hours}${timeSep}${minutes}${timeSep}${seconds}`;
}
/**
 * `moment().format('YYYY-MM-DD')` format date string.
 */
function YYYYMMDD(d, sep) {
    if (typeof d === 'string') {
        // YYYYMMDD(sep)
        sep = d;
        d = new Date();
    }
    else {
        // YYYYMMDD(d, sep)
        d = d || new Date();
        if (typeof sep !== 'string') {
            sep = '-';
        }
    }
    const [year, month, date] = getDateStringParts(d, true);
    return `${year}${sep}${month}${sep}${date}`;
}
/**
 * return datetime struct.
 *
 * @return {Object} date
 *  - {Number} YYYYMMDD, 20130401
 *  - {Number} H, 0, 1, 9, 12, 23
 */
function datestruct(now) {
    now = now || new Date();
    return {
        YYYYMMDD: now.getFullYear() * 10000 + (now.getMonth() + 1) * 100 + now.getDate(),
        H: now.getHours(),
    };
}
/**
 * Get Unix's timestamp in seconds.
 */
function timestamp(t) {
    if (t) {
        // convert timestamp to Date
        // timestamp(timestampValue)
        let v;
        if (typeof t === 'string') {
            v = Number(t);
        }
        else {
            v = t;
        }
        if (String(v).length === 10) {
            v *= 1000;
        }
        return new Date(v);
    }
    // get current timestamp
    return Math.round(Date.now() / 1000);
}
/**
 * Parse timestamp to Date
 */
function parseTimestamp(t) {
    return timestamp(t);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBLHNDQVlDO0FBd0JELGdEQWdCQztBQUtELHNDQUtDO0FBUUQsMEJBbUJDO0FBWUQsd0NBZ0JDO0FBS0QsNEJBY0M7QUFjRCxnQ0FNQztBQUtELDhCQWlCQztBQUtELHdDQUVDO0FBM0xELGlCQUFpQjtBQUNqQixJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7QUFDbEIsU0FBZ0IsYUFBYTtJQUMzQixRQUFRLEdBQUcsRUFBRSxDQUFDO0lBQ2QsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDckUsSUFBSSxXQUFXLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDckIsUUFBUSxJQUFJLEdBQUcsQ0FBQztJQUNsQixDQUFDO1NBQU0sQ0FBQztRQUNOLFFBQVEsSUFBSSxHQUFHLENBQUM7SUFDbEIsQ0FBQztJQUNELFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3BDLE1BQU0sY0FBYyxHQUFHLFdBQVcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxFQUFFLENBQUM7SUFDL0UsUUFBUSxJQUFJLEdBQUcsY0FBYyxJQUFJLENBQUM7SUFDbEMsT0FBTyxRQUFRLENBQUM7QUFDbEIsQ0FBQztBQUNELGFBQWEsRUFBRSxDQUFDO0FBRWhCLE1BQU0sTUFBTSxHQUEyQjtJQUNyQyxJQUFJLEVBQUUsS0FBSztJQUNYLElBQUksRUFBRSxLQUFLO0lBQ1gsSUFBSSxFQUFFLEtBQUs7SUFDWCxJQUFJLEVBQUUsS0FBSztJQUNYLElBQUksRUFBRSxLQUFLO0lBQ1gsSUFBSSxFQUFFLEtB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