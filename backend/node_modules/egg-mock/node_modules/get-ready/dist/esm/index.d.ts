import { EventEmitter } from 'node:events';
export type CallbackFunction = (err: Error | undefined) => void;
export type ReadyFunctionArg = boolean | Error | CallbackFunction;
export declare class Ready {
    #private;
    constructor();
    ready(): Promise<void>;
    ready(flagOrFunction: ReadyFunctionArg): void;
    get isReady(): boolean;
    get readyError(): Error | undefined;
    get hasReadyCallbacks(): boolean;
    /**
     * @param {Object} obj - an object that be mixed
     */
    static mixin(obj?: any): void;
}
export default Ready;
/**
 * EventEmitter Ready Wrapper
 */
export declare class ReadyEventEmitter extends EventEmitter {
    #private;
    ready(): Promise<void>;
    ready(flagOrFunction: ReadyFunctionArg): void;
    get isReady(): boolean;
    get readyError(): Error | undefined;
    get hasReadyCallbacks(): boolean;
}
